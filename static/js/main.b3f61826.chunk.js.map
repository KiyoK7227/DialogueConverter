{"version":3,"sources":["index.js"],"names":["EssayForm","props","_this","Object","C_Users_Kouhei_Kiyohara_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_Kouhei_Kiyohara_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_Kouhei_Kiyohara_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","value","fireDownloadCSV","bind","C_Users_Kouhei_Kiyohara_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","handleChange","handleSubmit","csv","inputText","split","textArray","i","length","text","indexOf","Infinity","splitText","unshift","replace","push","join","event","setState","target","_this2","textConvert","navigator","clipboard","writeText","then","success","sendResult","error","preventDefault","downloadCSV","console","log","opts","suggestedName","types","description","accept","octet/stream","window","showSaveFilePicker","handle","createWritable","writable","write","close","result","popup","document","getElementById","classList","add","blackBg","closeBtn","closePopUp","alert","elem","addEventListener","remove","textArea","querySelector","rows","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","Fragment","id","type","className","style","marginLeft","top","onClick","onSubmit","width","onChange","React","Component","Howto","_this3","htmlFor","SuccessPop","_this4","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.b3f61826.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n\nclass EssayForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    };\n\n    this.fireDownloadCSV = this.fireDownloadCSV.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  textConvert(csv) {\n    csv ? csv = \",\" : csv = \"\t\";\n    //文字列を改行ごとに分割して保管\n    let inputText = this.state.value.split(/\\r\\n|\\n/);\n    let textArray = [];\n    for (let i = 0; i < inputText.length; i++) {\n      let text = inputText[i];\n      if (text.length <= 0) continue;\n      //「と（どちらが先にあるか判定\n      let index1 = text.indexOf(\"「\") === -1 ? Infinity : text.indexOf(\"「\");\n      let index2 = text.indexOf(\"（\") === -1 ? Infinity : text.indexOf(\"（\");\n      if (index1 < index2) {\n        //文字列を最初の１回目の「の手前で分割し、「を削除する\n        let splitText = text.split(/(?<=^[^「]+?)「/);\n        if (splitText.length <= 1) splitText.unshift(\"\");\n        //文字列から一番最後の」を削除する\n        splitText[1] = splitText[1].replace(/(.*)」/, \"$1\");\n        //配列にpush\n        textArray.push(splitText[0] + csv + splitText[1]);\n      } else {\n        //文字列を最初の１回目の（の手前で分割する\n        let splitText = text.split(/(?<=^[^（]+?)（/);\n        splitText.length <= 1 ? splitText.unshift(\"\") : splitText[1] = \"（\" + splitText[1];\n        //配列にpush\n        textArray.push(splitText[0] + csv + splitText[1]);\n      }\n    }\n    //結合\n    textArray = textArray.join(\"\\n\");\n    return textArray;\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    let textArray = this.textConvert();\n    navigator.clipboard.writeText(textArray)\n      .then(\n        success => this.sendResult(true),\n        error => this.sendResult(false)\n      );\n    event.preventDefault();\n  }\n\n  fireDownloadCSV() {\n    this.downloadCSV()\n      .then(\n        success => console.log(\"ダウンロード\"),\n        error => console.log(\"キャンセル\")\n      );\n  }\n\n  async downloadCSV() {\n    let textArray = this.textConvert(true);\n    textArray = \"\\ufeff\" + textArray;\n    const opts = {\n      suggestedName: \"dialogue\",\n      types: [{\n        description: \"csv\",\n        accept: { \"octet/stream\": [\".csv\"] },\n      }],\n    };\n    const handle = await window.showSaveFilePicker(opts);\n    const writable = await handle.createWritable();\n    await writable.write(textArray);\n    await writable.close();\n  }\n\n  sendResult(result) {\n    if (!result) {\n      window.alert(\"申し訳ありません。クリップボードへのコピーに失敗しました。\\nお手数ですがcsv保存か別のブラウザなどをお試しください。\");\n      return;\n    }\n    var popup = document.getElementById(\"js-popup\");\n    if (!popup) return;\n    popup.classList.add(\"is-show\");\n\n    var blackBg = document.getElementById(\"js-black-bg\");\n    var closeBtn = document.getElementById(\"js-close-btn\");\n\n    closePopUp(blackBg);\n    closePopUp(closeBtn);\n\n    function closePopUp(elem) {\n      if (!elem) return;\n      elem.addEventListener(\"click\", function () {\n        popup.classList.remove(\"is-show\");\n      })\n    }\n  }\n\n  render() {\n    const textArea = document.querySelector(\"textarea\");\n    const textRowCount = textArea ? textArea.value.split(\"\\n\").length : 0;\n    const rows = textRowCount + 1;\n    return (\n      <>\n        <div id=\"formAlign\">\n          <input type=\"button\" value=\"変換してCSVデータを保存\" className=\"button\" style={{ marginLeft: \"-115px\", top: \"65px\" }} onClick={this.fireDownloadCSV} />\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <div id=\"formAlign\">\n            <textarea className=\"textArea\"\n              style={{ width: \"50%\" }}\n              rows={rows}\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </div>\n          <input type=\"submit\" value=\"変換してクリップボードへコピー\" className=\"button\" />\n        </form>\n      </>\n    );\n  }\n}\n\nclass Howto extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"popup_wrap\">\n          <input id=\"trigger\" type=\"checkbox\" />\n          <div className=\"popup_overlay\">\n            <label htmlFor=\"trigger\" className=\"popup_trigger\"></label>\n            <div className=\"popup_content\">\n              <label htmlFor=\"trigger\" className=\"close_btn\">×</label>\n              <h1 className=\"popup-logo\">\n                これはどんなアプリ？\n              </h1>\n              <p>\n                キャラクターのセリフを \"名前\" と \"セリフ\" でセル単位ごとに分割してクリップボードにコピーできるWebアプリです。\n              </p>\n              <h1 className=\"popup-logo\">\n                どういうこと？\n              </h1>\n              <p>\n                例えば……<br />\n                田中「好きな名台詞は「お前はもう……死んでいるッ！」だね～」　というセリフを<br />\n                田中 / 好きな名台詞は「お前はもう……死んでいるッ！」だね～　という二つのセルに分けます。<br /><br />\n                つまり、シナリオライターが書いたドキュメント文章を名前とセリフに分割してゲーム開発などでコピペ作業がしやすくなります！\n              </p>\n              <h1 className=\"popup-logo\">\n                使い方\n              </h1>\n              <p>\n                １： テキストフォームに変換したい文章を貼り付けてください。<br />\n                ２：「変換してCSVデータを保存」or「変換してクリップボードへコピー」を押してください。<br />\n                ３：「変換してクリップボードへコピー」を選んだ場合は、Excelやスプレッドシートに Ctrl + V で貼り付けてください。\n              </p>\n              <h1 className=\"popup-logo\">\n                １行づつしかできないの？セリフ形式になってない地の文は？\n              </h1>\n              <p>\n                何行でも貼り付けられますよ。<br />\n                文章にセリフになってない地の文が混じっていても大丈夫です。\n              </p>\n            </div>\n          </div>\n        </div><label htmlFor=\"trigger\" className=\"open_btn\">使い方</label>\n      </>\n    );\n  }\n}\n\nclass SuccessPop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"popup\" id=\"js-popup\">\n          <div className=\"popup-inner\">\n            <div className=\"close-btn2\" id=\"js-close-btn\"><label htmlFor=\"js-close-btn\" className=\"close_btn\">×</label></div>\n            <h1 className=\"popup-logo\">\n              成功！\n            </h1>\n            <p>\n              変換してクリップボードへコピーしました。<br />Excelやスプレッドシートへ貼り付けてご利用ください。<br /><br />※貼り付ける際はセルをシングルクリックした状態にしてください。\n            </p>\n          </div>\n          <div className=\"black-background\" id=\"js-black-bg\"></div>\n        </div>\n      </>\n    );\n  }\n}\n\n// ========================================\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<EssayForm />);\nconst root2 = ReactDOM.createRoot(document.getElementById(\"root2\"));\nroot2.render(<Howto />);\nconst root3 = ReactDOM.createRoot(document.getElementById(\"root3\"));\nroot3.render(<SuccessPop />);\n"],"sourceRoot":""}